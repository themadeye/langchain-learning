import os
import openai
import datetime

from dotenv import load_dotenv
from langchain.chat_models import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain.output_parsers import ResponseSchema
from langchain.output_parsers import StructuredOutputParser
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory

load_dotenv() # read local .env file

openai.api_key = os.getenv('OPENAI_API_KEY')
current_date = datetime.datetime.now().date()
target_date = datetime.date(2024, 6, 12)

if current_date > target_date:
    llm_model = "gpt-3.5-turbo"
else:
    llm_model = "gpt-3.5-turbo-0301"

# To control the randomness and creativity of the generated
# text by an LLM, use temperature = 0.0
chat = ChatOpenAI(temperature=0.9, model=llm_model)  # chat is an object of the chat model
memory = ConversationBufferMemory()
conversation = ConversationChain(
    llm=chat, 
    memory = memory,
    verbose=True
)

memory.save_context({"input": "Hi"}, {"output": "What's up"})
memory.load_memory_variables({})

# conversation.predict(input="What is 1+1?")
print(memory.buffer)
conversation.predict(input="Hi")

def get_message_openai(prompt, model=llm_model):
    messages = [{"role": "user", "content": prompt}]
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=0, 
    )
    return response.choices[0].message["content"]

def get_message_langchain(prompt, text, style=None, format_instructions=None):
    prompt_template = ChatPromptTemplate.from_template(template=prompt) # Instantiate a prompt template by a given template
    langchainResponse = prompt_template.format_messages(style=style, text=text, format_instructions=format_instructions) # Format the message using LangChain.
    return chat(langchainResponse) # return the output generated by OpenAI with a given language model


customer_email = """
    Arrr, I be fuming that me blender lid \
    flew off and splattered me kitchen walls \
    with smoothie! And to make matters worse,\
    the warranty don't cover the cost of \
    cleaning up me kitchen. I need yer help \
    right now, matey!
"""
style = """English pirate accent \
    in an aggressive tone
"""
prompt = f"""Translate the text \
    that is delimited by triple backticks 
    into a style that is {style}.
    text: ```{customer_email}```
"""
# response = get_message_openai(prompt)
# print(response)

customer_review = """\
    This leaf blower is pretty amazing.  It has four settings:\
    candle blower, gentle breeze, windy city, and tornado. \
    It arrived in two days, just in time for my wife's \
    anniversary present. \
    I think my wife liked it so much she was speechless. \
    So far I've been the only one using it, and I've been \
    using it every other morning to clear the leaves on our lawn. \
    It's slightly more expensive than the other leaf blowers \
    out there, but I think it's worth it for the extra features.
"""

review_template = """\
    For the following text, extract the following information:
    
    gift: Was the item purchased as a gift for someone else? \
    Answer True if yes, False if not or unknown.
    
    delivery_days: How many days did it take for the product \
    to arrive? If this information is not found, output -1.
    
    price_value: Extract any sentences about the value or price,\
    and translate the output into a style that is {style}.
    
    text: {text}
    
    {format_instructions}
"""


# langchainResponse = get_message_langchain(review_template, customer_review)
# print(langchainResponse.content)

# Use StructuredOutputParser to form a set of instruction with ResponseSchema
# We can instruct LangChain to output a certain desired output and provide an instruction to parse the output.
output_parser = StructuredOutputParser.from_response_schemas(
    [
        ResponseSchema(name="gift", description="was the item purchased as a gift for someone else? Answer True if yes, False if not or unknown."),
        ResponseSchema(name="delivery_days", description="How many days did it take for the product to arrive? If this information is not found, output -1"),
        ResponseSchema(name="price_value", description="Extract any sentences about the value or price, and output them as a comma separated Python list.")
    ]
)
format_instructions = output_parser.get_format_instructions()

# outputResponse = get_message_langchain(review_template, customer_review, style, format_instructions)
# output_dict = output_parser.parse(outputResponse.content)

# print(output_dict)
    
    